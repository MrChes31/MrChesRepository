class Figure:

    sides_count = 0
    __color = [0, 0, 0]
    def __init__(self,color,*sides,filled=True):
        self.__color = [0, 0, 0]
        self.__sides = [1] * self.sides_count
        self.filled = filled

        if len(sides) == self.sides_count:
            self.__sides = sides
        elif len(sides) == 1:
                self.__sides = sides * self.sides_count
        else:
            self.__sides = [1] * self.sides_count
            self.__color = color
            self.filled = filled

    def set_color(self,r,g,b):
       if self.__is_valid_color(r,g,b):
            self.__color = [r, g, b]
    def __is_valid_color(self,r,g,b):
        if isinstance(r,int) and isinstance(g, int)and isinstance(b,int):
            if 0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255:
                return True
                return False

    def set_sides(self,*new_sides):
        if len(new_sides) == self.sides_count:
            if self.__is_valid_sides(*new_sides) == True:
                self.__sides = list(new_sides)


    def __is_valid_sides (self,*new_sides):
        if len(new_sides) != self.sides_count:
            return False
        for side in new_sides:
            if not isinstance(side, int) or side <= 0:
                return False
                return True
    def get_color(self):
        return self.__color

    def get_sides(self):
        return list(self.__sides)

    def __len__(self):
        p = 0
        for i in self.get_sides():
            p += i
        return p
class Circle(Figure):
    sides_count = 1
    def __init__(self, color, sides):
        super().__init__(color, sides)
        self._radius = self.get_sides()[0]/2*3.14

    def get_square(self):
        return 3.14 * self.__radius ** 2

class Triangle(Figure): # Исправляем название класса
    sides_count = 3

    def __init__(self, color, sides):
        super().__init__(color, sides)

    def get_square(self):
        sides = self.get_sides()
        p = sum(sides) / 2
        return (p * (p - sides[0]) * (p - sides[1]) * (p - sides[2])) ** 0.5

class Cube(Figure):
    def __init__(self, color: list, *sides: int):
        super().__init__(color, *sides)
        self.set_sides(*list(sides) * 12)

    sides_count = 12

    def __init__(self, color, sides):
        super().__init__(color, sides)

    def get_volume(self):
        return self.get_sides()[0] ** 3

circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)

# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())

# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())
