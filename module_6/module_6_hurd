class Figure:

    sides_count = 0
    __color = [0, 0, 0]
    def __init__(self,color,*sides,filled=True):
        if len(sides) == self.sides_count:
            self.__sides = sides
        elif len(sides) == 1:
                self.__sides = sides * self.sides_count
        else:
            self.__sides = [1] * self.sides_count
            self.__color = color
            self.filled = filled

    def set_color(self,r,g,b):
        """Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color
         на соответствующие значения, предварительно проверив их на
          корректность. Если введены некорректные данные, то цвет остаётся прежним."""

        if self.__is_valid_color(r,g,b) == True:
            self.__color = [r, g, b]
    def __is_valid_color(self,r,g,b):
        if isinstance(r,int) == True and isinstance(g, int) == True and isinstance(b,int):
            if r>=0 and r<=255:
                if g>=0 and g<=255:
                    if b>=0 and b<=255:
                        return True

    def set_sides(self,*new_sides):
        if len(new_sides) == self.sides_count:
            if self.__is_valid_sides(*new_sides) == True:
                self.__sides = list(new_sides)


    def __is_valid_sides (self,*args):
        if len(args) == self.sides_count:
           for i in args:
               if int(i) <=0:
                   return False
        else:
            return True
    def get_color(self):
        return self.__color

    def get_sides(self):
        return list(self.__sides)

    def __len__(self):
        p = 0
        for i in self.get_sides():
            p += i
        return p
class Circle(Figure):
    sides_count = 1
    def __init__(self, color, sides):
        super().__init__(color, sides)
        self._radius = self.get_sides()[0]/2*3.14

    def get_square(self):
        return 3.14 * self.__radius ** 2

class Triande(Figure):
    sides_count = 3

    def __init__(self, color, sides):
        super().__init__(color, sides)

    def get_square(self):
        P = 0
        for i in self.get_sides():
            P += i
        p = P / 2
        return ((p - self.get_sides()[0]) * (p - self.get_sides()[1]) * (p - self.get_sides()[2])) ** 0.5


class Cube(Figure):
    sides_count = 12

    def __init__(self, color, sides):
        super().__init__(color, sides)

    def get_volume(self):
        return self.get_sides()[0] ** 3

circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)

# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())

# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())
